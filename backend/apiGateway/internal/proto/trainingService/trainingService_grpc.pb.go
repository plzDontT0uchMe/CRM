// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: internal/proto/trainingService/trainingService.proto

package trainingService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TrainingService_GetExercises_FullMethodName        = "/trainingService.TrainingService/GetExercises"
	TrainingService_GetExerciseById_FullMethodName     = "/trainingService.TrainingService/GetExerciseById"
	TrainingService_CreateProgram_FullMethodName       = "/trainingService.TrainingService/CreateProgram"
	TrainingService_GetProgramsByUserId_FullMethodName = "/trainingService.TrainingService/GetProgramsByUserId"
	TrainingService_DeleteProgramLocal_FullMethodName  = "/trainingService.TrainingService/DeleteProgramLocal"
	TrainingService_DeleteProgram_FullMethodName       = "/trainingService.TrainingService/DeleteProgram"
	TrainingService_ShareProgram_FullMethodName        = "/trainingService.TrainingService/ShareProgram"
	TrainingService_ChangeProgram_FullMethodName       = "/trainingService.TrainingService/ChangeProgram"
)

// TrainingServiceClient is the client API for TrainingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrainingServiceClient interface {
	GetExercises(ctx context.Context, in *GetExercisesRequest, opts ...grpc.CallOption) (*GetExercisesResponse, error)
	GetExerciseById(ctx context.Context, in *GetExerciseByIdRequest, opts ...grpc.CallOption) (*GetExerciseByIdResponse, error)
	CreateProgram(ctx context.Context, in *CreateProgramRequest, opts ...grpc.CallOption) (*CreateProgramResponse, error)
	GetProgramsByUserId(ctx context.Context, in *GetProgramsByUserIdRequest, opts ...grpc.CallOption) (*GetProgramsByUserIdResponse, error)
	DeleteProgramLocal(ctx context.Context, in *DeleteProgramLocalRequest, opts ...grpc.CallOption) (*DeleteProgramLocalResponse, error)
	DeleteProgram(ctx context.Context, in *DeleteProgramRequest, opts ...grpc.CallOption) (*DeleteProgramResponse, error)
	ShareProgram(ctx context.Context, in *ShareProgramRequest, opts ...grpc.CallOption) (*ShareProgramResponse, error)
	ChangeProgram(ctx context.Context, in *ChangeProgramRequest, opts ...grpc.CallOption) (*ChangeProgramResponse, error)
}

type trainingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainingServiceClient(cc grpc.ClientConnInterface) TrainingServiceClient {
	return &trainingServiceClient{cc}
}

func (c *trainingServiceClient) GetExercises(ctx context.Context, in *GetExercisesRequest, opts ...grpc.CallOption) (*GetExercisesResponse, error) {
	out := new(GetExercisesResponse)
	err := c.cc.Invoke(ctx, TrainingService_GetExercises_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingServiceClient) GetExerciseById(ctx context.Context, in *GetExerciseByIdRequest, opts ...grpc.CallOption) (*GetExerciseByIdResponse, error) {
	out := new(GetExerciseByIdResponse)
	err := c.cc.Invoke(ctx, TrainingService_GetExerciseById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingServiceClient) CreateProgram(ctx context.Context, in *CreateProgramRequest, opts ...grpc.CallOption) (*CreateProgramResponse, error) {
	out := new(CreateProgramResponse)
	err := c.cc.Invoke(ctx, TrainingService_CreateProgram_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingServiceClient) GetProgramsByUserId(ctx context.Context, in *GetProgramsByUserIdRequest, opts ...grpc.CallOption) (*GetProgramsByUserIdResponse, error) {
	out := new(GetProgramsByUserIdResponse)
	err := c.cc.Invoke(ctx, TrainingService_GetProgramsByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingServiceClient) DeleteProgramLocal(ctx context.Context, in *DeleteProgramLocalRequest, opts ...grpc.CallOption) (*DeleteProgramLocalResponse, error) {
	out := new(DeleteProgramLocalResponse)
	err := c.cc.Invoke(ctx, TrainingService_DeleteProgramLocal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingServiceClient) DeleteProgram(ctx context.Context, in *DeleteProgramRequest, opts ...grpc.CallOption) (*DeleteProgramResponse, error) {
	out := new(DeleteProgramResponse)
	err := c.cc.Invoke(ctx, TrainingService_DeleteProgram_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingServiceClient) ShareProgram(ctx context.Context, in *ShareProgramRequest, opts ...grpc.CallOption) (*ShareProgramResponse, error) {
	out := new(ShareProgramResponse)
	err := c.cc.Invoke(ctx, TrainingService_ShareProgram_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingServiceClient) ChangeProgram(ctx context.Context, in *ChangeProgramRequest, opts ...grpc.CallOption) (*ChangeProgramResponse, error) {
	out := new(ChangeProgramResponse)
	err := c.cc.Invoke(ctx, TrainingService_ChangeProgram_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainingServiceServer is the server API for TrainingService service.
// All implementations must embed UnimplementedTrainingServiceServer
// for forward compatibility
type TrainingServiceServer interface {
	GetExercises(context.Context, *GetExercisesRequest) (*GetExercisesResponse, error)
	GetExerciseById(context.Context, *GetExerciseByIdRequest) (*GetExerciseByIdResponse, error)
	CreateProgram(context.Context, *CreateProgramRequest) (*CreateProgramResponse, error)
	GetProgramsByUserId(context.Context, *GetProgramsByUserIdRequest) (*GetProgramsByUserIdResponse, error)
	DeleteProgramLocal(context.Context, *DeleteProgramLocalRequest) (*DeleteProgramLocalResponse, error)
	DeleteProgram(context.Context, *DeleteProgramRequest) (*DeleteProgramResponse, error)
	ShareProgram(context.Context, *ShareProgramRequest) (*ShareProgramResponse, error)
	ChangeProgram(context.Context, *ChangeProgramRequest) (*ChangeProgramResponse, error)
	mustEmbedUnimplementedTrainingServiceServer()
}

// UnimplementedTrainingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrainingServiceServer struct {
}

func (UnimplementedTrainingServiceServer) GetExercises(context.Context, *GetExercisesRequest) (*GetExercisesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExercises not implemented")
}
func (UnimplementedTrainingServiceServer) GetExerciseById(context.Context, *GetExerciseByIdRequest) (*GetExerciseByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExerciseById not implemented")
}
func (UnimplementedTrainingServiceServer) CreateProgram(context.Context, *CreateProgramRequest) (*CreateProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProgram not implemented")
}
func (UnimplementedTrainingServiceServer) GetProgramsByUserId(context.Context, *GetProgramsByUserIdRequest) (*GetProgramsByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgramsByUserId not implemented")
}
func (UnimplementedTrainingServiceServer) DeleteProgramLocal(context.Context, *DeleteProgramLocalRequest) (*DeleteProgramLocalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProgramLocal not implemented")
}
func (UnimplementedTrainingServiceServer) DeleteProgram(context.Context, *DeleteProgramRequest) (*DeleteProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProgram not implemented")
}
func (UnimplementedTrainingServiceServer) ShareProgram(context.Context, *ShareProgramRequest) (*ShareProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareProgram not implemented")
}
func (UnimplementedTrainingServiceServer) ChangeProgram(context.Context, *ChangeProgramRequest) (*ChangeProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeProgram not implemented")
}
func (UnimplementedTrainingServiceServer) mustEmbedUnimplementedTrainingServiceServer() {}

// UnsafeTrainingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainingServiceServer will
// result in compilation errors.
type UnsafeTrainingServiceServer interface {
	mustEmbedUnimplementedTrainingServiceServer()
}

func RegisterTrainingServiceServer(s grpc.ServiceRegistrar, srv TrainingServiceServer) {
	s.RegisterService(&TrainingService_ServiceDesc, srv)
}

func _TrainingService_GetExercises_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExercisesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingServiceServer).GetExercises(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainingService_GetExercises_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingServiceServer).GetExercises(ctx, req.(*GetExercisesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingService_GetExerciseById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExerciseByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingServiceServer).GetExerciseById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainingService_GetExerciseById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingServiceServer).GetExerciseById(ctx, req.(*GetExerciseByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingService_CreateProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingServiceServer).CreateProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainingService_CreateProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingServiceServer).CreateProgram(ctx, req.(*CreateProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingService_GetProgramsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProgramsByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingServiceServer).GetProgramsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainingService_GetProgramsByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingServiceServer).GetProgramsByUserId(ctx, req.(*GetProgramsByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingService_DeleteProgramLocal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProgramLocalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingServiceServer).DeleteProgramLocal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainingService_DeleteProgramLocal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingServiceServer).DeleteProgramLocal(ctx, req.(*DeleteProgramLocalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingService_DeleteProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingServiceServer).DeleteProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainingService_DeleteProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingServiceServer).DeleteProgram(ctx, req.(*DeleteProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingService_ShareProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingServiceServer).ShareProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainingService_ShareProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingServiceServer).ShareProgram(ctx, req.(*ShareProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingService_ChangeProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingServiceServer).ChangeProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainingService_ChangeProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingServiceServer).ChangeProgram(ctx, req.(*ChangeProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrainingService_ServiceDesc is the grpc.ServiceDesc for TrainingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrainingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trainingService.TrainingService",
	HandlerType: (*TrainingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExercises",
			Handler:    _TrainingService_GetExercises_Handler,
		},
		{
			MethodName: "GetExerciseById",
			Handler:    _TrainingService_GetExerciseById_Handler,
		},
		{
			MethodName: "CreateProgram",
			Handler:    _TrainingService_CreateProgram_Handler,
		},
		{
			MethodName: "GetProgramsByUserId",
			Handler:    _TrainingService_GetProgramsByUserId_Handler,
		},
		{
			MethodName: "DeleteProgramLocal",
			Handler:    _TrainingService_DeleteProgramLocal_Handler,
		},
		{
			MethodName: "DeleteProgram",
			Handler:    _TrainingService_DeleteProgram_Handler,
		},
		{
			MethodName: "ShareProgram",
			Handler:    _TrainingService_ShareProgram_Handler,
		},
		{
			MethodName: "ChangeProgram",
			Handler:    _TrainingService_ChangeProgram_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/trainingService/trainingService.proto",
}
