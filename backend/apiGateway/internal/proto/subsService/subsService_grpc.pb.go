// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: internal/proto/subsService/subsService.proto

package subsService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SubsService_Registration_FullMethodName               = "/subsService.SubsService/Registration"
	SubsService_GetSubscriptionByAccountId_FullMethodName = "/subsService.SubsService/GetSubscriptionByAccountId"
	SubsService_GetSubscriptions_FullMethodName           = "/subsService.SubsService/GetSubscriptions"
	SubsService_ChangeSubscription_FullMethodName         = "/subsService.SubsService/ChangeSubscription"
)

// SubsServiceClient is the client API for SubsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubsServiceClient interface {
	Registration(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error)
	GetSubscriptionByAccountId(ctx context.Context, in *GetSubscriptionByAccountIdRequest, opts ...grpc.CallOption) (*GetSubscriptionByAccountIdResponse, error)
	GetSubscriptions(ctx context.Context, in *GetSubscriptionsRequest, opts ...grpc.CallOption) (*GetSubscriptionsResponse, error)
	ChangeSubscription(ctx context.Context, in *ChangeSubscriptionRequest, opts ...grpc.CallOption) (*ChangeSubscriptionResponse, error)
}

type subsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubsServiceClient(cc grpc.ClientConnInterface) SubsServiceClient {
	return &subsServiceClient{cc}
}

func (c *subsServiceClient) Registration(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error) {
	out := new(RegistrationResponse)
	err := c.cc.Invoke(ctx, SubsService_Registration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subsServiceClient) GetSubscriptionByAccountId(ctx context.Context, in *GetSubscriptionByAccountIdRequest, opts ...grpc.CallOption) (*GetSubscriptionByAccountIdResponse, error) {
	out := new(GetSubscriptionByAccountIdResponse)
	err := c.cc.Invoke(ctx, SubsService_GetSubscriptionByAccountId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subsServiceClient) GetSubscriptions(ctx context.Context, in *GetSubscriptionsRequest, opts ...grpc.CallOption) (*GetSubscriptionsResponse, error) {
	out := new(GetSubscriptionsResponse)
	err := c.cc.Invoke(ctx, SubsService_GetSubscriptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subsServiceClient) ChangeSubscription(ctx context.Context, in *ChangeSubscriptionRequest, opts ...grpc.CallOption) (*ChangeSubscriptionResponse, error) {
	out := new(ChangeSubscriptionResponse)
	err := c.cc.Invoke(ctx, SubsService_ChangeSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubsServiceServer is the server API for SubsService service.
// All implementations must embed UnimplementedSubsServiceServer
// for forward compatibility
type SubsServiceServer interface {
	Registration(context.Context, *RegistrationRequest) (*RegistrationResponse, error)
	GetSubscriptionByAccountId(context.Context, *GetSubscriptionByAccountIdRequest) (*GetSubscriptionByAccountIdResponse, error)
	GetSubscriptions(context.Context, *GetSubscriptionsRequest) (*GetSubscriptionsResponse, error)
	ChangeSubscription(context.Context, *ChangeSubscriptionRequest) (*ChangeSubscriptionResponse, error)
	mustEmbedUnimplementedSubsServiceServer()
}

// UnimplementedSubsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubsServiceServer struct {
}

func (UnimplementedSubsServiceServer) Registration(context.Context, *RegistrationRequest) (*RegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Registration not implemented")
}
func (UnimplementedSubsServiceServer) GetSubscriptionByAccountId(context.Context, *GetSubscriptionByAccountIdRequest) (*GetSubscriptionByAccountIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionByAccountId not implemented")
}
func (UnimplementedSubsServiceServer) GetSubscriptions(context.Context, *GetSubscriptionsRequest) (*GetSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptions not implemented")
}
func (UnimplementedSubsServiceServer) ChangeSubscription(context.Context, *ChangeSubscriptionRequest) (*ChangeSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeSubscription not implemented")
}
func (UnimplementedSubsServiceServer) mustEmbedUnimplementedSubsServiceServer() {}

// UnsafeSubsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubsServiceServer will
// result in compilation errors.
type UnsafeSubsServiceServer interface {
	mustEmbedUnimplementedSubsServiceServer()
}

func RegisterSubsServiceServer(s grpc.ServiceRegistrar, srv SubsServiceServer) {
	s.RegisterService(&SubsService_ServiceDesc, srv)
}

func _SubsService_Registration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubsServiceServer).Registration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubsService_Registration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubsServiceServer).Registration(ctx, req.(*RegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubsService_GetSubscriptionByAccountId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionByAccountIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubsServiceServer).GetSubscriptionByAccountId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubsService_GetSubscriptionByAccountId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubsServiceServer).GetSubscriptionByAccountId(ctx, req.(*GetSubscriptionByAccountIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubsService_GetSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubsServiceServer).GetSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubsService_GetSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubsServiceServer).GetSubscriptions(ctx, req.(*GetSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubsService_ChangeSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubsServiceServer).ChangeSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubsService_ChangeSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubsServiceServer).ChangeSubscription(ctx, req.(*ChangeSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubsService_ServiceDesc is the grpc.ServiceDesc for SubsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "subsService.SubsService",
	HandlerType: (*SubsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Registration",
			Handler:    _SubsService_Registration_Handler,
		},
		{
			MethodName: "GetSubscriptionByAccountId",
			Handler:    _SubsService_GetSubscriptionByAccountId_Handler,
		},
		{
			MethodName: "GetSubscriptions",
			Handler:    _SubsService_GetSubscriptions_Handler,
		},
		{
			MethodName: "ChangeSubscription",
			Handler:    _SubsService_ChangeSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/subsService/subsService.proto",
}
