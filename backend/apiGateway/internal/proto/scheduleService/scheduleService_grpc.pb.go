// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: internal/proto/scheduleService/scheduleService.proto

package scheduleService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ScheduleService_GetRecordsForUser_FullMethodName         = "/scheduleService.ScheduleService/GetRecordsForUser"
	ScheduleService_GetRecords_FullMethodName                = "/scheduleService.ScheduleService/GetRecords"
	ScheduleService_GetRecordsByTrainerForDay_FullMethodName = "/scheduleService.ScheduleService/GetRecordsByTrainerForDay"
	ScheduleService_AddRecord_FullMethodName                 = "/scheduleService.ScheduleService/AddRecord"
	ScheduleService_DeleteRecordById_FullMethodName          = "/scheduleService.ScheduleService/DeleteRecordById"
	ScheduleService_DeleteRecordByClientId_FullMethodName    = "/scheduleService.ScheduleService/DeleteRecordByClientId"
)

// ScheduleServiceClient is the client API for ScheduleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScheduleServiceClient interface {
	GetRecordsForUser(ctx context.Context, in *GetRecordsForUserRequest, opts ...grpc.CallOption) (*GetRecordsForUserResponse, error)
	GetRecords(ctx context.Context, in *GetRecordsRequest, opts ...grpc.CallOption) (*GetRecordsResponse, error)
	GetRecordsByTrainerForDay(ctx context.Context, in *GetRecordsByTrainerForDayRequest, opts ...grpc.CallOption) (*GetRecordsByTrainerForDayResponse, error)
	AddRecord(ctx context.Context, in *AddRecordRequest, opts ...grpc.CallOption) (*AddRecordResponse, error)
	DeleteRecordById(ctx context.Context, in *DeleteRecordByIdRequest, opts ...grpc.CallOption) (*DeleteRecordByIdResponse, error)
	DeleteRecordByClientId(ctx context.Context, in *DeleteRecordByClientIdRequest, opts ...grpc.CallOption) (*DeleteRecordByClientIdResponse, error)
}

type scheduleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScheduleServiceClient(cc grpc.ClientConnInterface) ScheduleServiceClient {
	return &scheduleServiceClient{cc}
}

func (c *scheduleServiceClient) GetRecordsForUser(ctx context.Context, in *GetRecordsForUserRequest, opts ...grpc.CallOption) (*GetRecordsForUserResponse, error) {
	out := new(GetRecordsForUserResponse)
	err := c.cc.Invoke(ctx, ScheduleService_GetRecordsForUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) GetRecords(ctx context.Context, in *GetRecordsRequest, opts ...grpc.CallOption) (*GetRecordsResponse, error) {
	out := new(GetRecordsResponse)
	err := c.cc.Invoke(ctx, ScheduleService_GetRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) GetRecordsByTrainerForDay(ctx context.Context, in *GetRecordsByTrainerForDayRequest, opts ...grpc.CallOption) (*GetRecordsByTrainerForDayResponse, error) {
	out := new(GetRecordsByTrainerForDayResponse)
	err := c.cc.Invoke(ctx, ScheduleService_GetRecordsByTrainerForDay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) AddRecord(ctx context.Context, in *AddRecordRequest, opts ...grpc.CallOption) (*AddRecordResponse, error) {
	out := new(AddRecordResponse)
	err := c.cc.Invoke(ctx, ScheduleService_AddRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) DeleteRecordById(ctx context.Context, in *DeleteRecordByIdRequest, opts ...grpc.CallOption) (*DeleteRecordByIdResponse, error) {
	out := new(DeleteRecordByIdResponse)
	err := c.cc.Invoke(ctx, ScheduleService_DeleteRecordById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) DeleteRecordByClientId(ctx context.Context, in *DeleteRecordByClientIdRequest, opts ...grpc.CallOption) (*DeleteRecordByClientIdResponse, error) {
	out := new(DeleteRecordByClientIdResponse)
	err := c.cc.Invoke(ctx, ScheduleService_DeleteRecordByClientId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScheduleServiceServer is the server API for ScheduleService service.
// All implementations must embed UnimplementedScheduleServiceServer
// for forward compatibility
type ScheduleServiceServer interface {
	GetRecordsForUser(context.Context, *GetRecordsForUserRequest) (*GetRecordsForUserResponse, error)
	GetRecords(context.Context, *GetRecordsRequest) (*GetRecordsResponse, error)
	GetRecordsByTrainerForDay(context.Context, *GetRecordsByTrainerForDayRequest) (*GetRecordsByTrainerForDayResponse, error)
	AddRecord(context.Context, *AddRecordRequest) (*AddRecordResponse, error)
	DeleteRecordById(context.Context, *DeleteRecordByIdRequest) (*DeleteRecordByIdResponse, error)
	DeleteRecordByClientId(context.Context, *DeleteRecordByClientIdRequest) (*DeleteRecordByClientIdResponse, error)
	mustEmbedUnimplementedScheduleServiceServer()
}

// UnimplementedScheduleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScheduleServiceServer struct {
}

func (UnimplementedScheduleServiceServer) GetRecordsForUser(context.Context, *GetRecordsForUserRequest) (*GetRecordsForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordsForUser not implemented")
}
func (UnimplementedScheduleServiceServer) GetRecords(context.Context, *GetRecordsRequest) (*GetRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecords not implemented")
}
func (UnimplementedScheduleServiceServer) GetRecordsByTrainerForDay(context.Context, *GetRecordsByTrainerForDayRequest) (*GetRecordsByTrainerForDayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordsByTrainerForDay not implemented")
}
func (UnimplementedScheduleServiceServer) AddRecord(context.Context, *AddRecordRequest) (*AddRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecord not implemented")
}
func (UnimplementedScheduleServiceServer) DeleteRecordById(context.Context, *DeleteRecordByIdRequest) (*DeleteRecordByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecordById not implemented")
}
func (UnimplementedScheduleServiceServer) DeleteRecordByClientId(context.Context, *DeleteRecordByClientIdRequest) (*DeleteRecordByClientIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecordByClientId not implemented")
}
func (UnimplementedScheduleServiceServer) mustEmbedUnimplementedScheduleServiceServer() {}

// UnsafeScheduleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScheduleServiceServer will
// result in compilation errors.
type UnsafeScheduleServiceServer interface {
	mustEmbedUnimplementedScheduleServiceServer()
}

func RegisterScheduleServiceServer(s grpc.ServiceRegistrar, srv ScheduleServiceServer) {
	s.RegisterService(&ScheduleService_ServiceDesc, srv)
}

func _ScheduleService_GetRecordsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).GetRecordsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_GetRecordsForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).GetRecordsForUser(ctx, req.(*GetRecordsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_GetRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).GetRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_GetRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).GetRecords(ctx, req.(*GetRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_GetRecordsByTrainerForDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordsByTrainerForDayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).GetRecordsByTrainerForDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_GetRecordsByTrainerForDay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).GetRecordsByTrainerForDay(ctx, req.(*GetRecordsByTrainerForDayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_AddRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).AddRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_AddRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).AddRecord(ctx, req.(*AddRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_DeleteRecordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecordByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).DeleteRecordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_DeleteRecordById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).DeleteRecordById(ctx, req.(*DeleteRecordByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_DeleteRecordByClientId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecordByClientIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).DeleteRecordByClientId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_DeleteRecordByClientId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).DeleteRecordByClientId(ctx, req.(*DeleteRecordByClientIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScheduleService_ServiceDesc is the grpc.ServiceDesc for ScheduleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScheduleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scheduleService.ScheduleService",
	HandlerType: (*ScheduleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecordsForUser",
			Handler:    _ScheduleService_GetRecordsForUser_Handler,
		},
		{
			MethodName: "GetRecords",
			Handler:    _ScheduleService_GetRecords_Handler,
		},
		{
			MethodName: "GetRecordsByTrainerForDay",
			Handler:    _ScheduleService_GetRecordsByTrainerForDay_Handler,
		},
		{
			MethodName: "AddRecord",
			Handler:    _ScheduleService_AddRecord_Handler,
		},
		{
			MethodName: "DeleteRecordById",
			Handler:    _ScheduleService_DeleteRecordById_Handler,
		},
		{
			MethodName: "DeleteRecordByClientId",
			Handler:    _ScheduleService_DeleteRecordByClientId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/scheduleService/scheduleService.proto",
}
